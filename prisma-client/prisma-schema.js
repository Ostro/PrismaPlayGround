module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateInventory {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Inventory {
  id: ID!
  owner: User!
  item: Item!
  quantity: Int!
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  owner: UserCreateOneWithoutBagInput!
  item: ItemCreateOneInput!
  quantity: Int!
}

input InventoryCreateManyWithoutOwnerInput {
  create: [InventoryCreateWithoutOwnerInput!]
  connect: [InventoryWhereUniqueInput!]
}

input InventoryCreateWithoutOwnerInput {
  item: ItemCreateOneInput!
  quantity: Int!
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  id: ID!
  quantity: Int!
}

input InventoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [InventoryScalarWhereInput!]
  OR: [InventoryScalarWhereInput!]
  NOT: [InventoryScalarWhereInput!]
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateInput {
  owner: UserUpdateOneRequiredWithoutBagInput
  item: ItemUpdateOneRequiredInput
  quantity: Int
}

input InventoryUpdateManyDataInput {
  quantity: Int
}

input InventoryUpdateManyMutationInput {
  quantity: Int
}

input InventoryUpdateManyWithoutOwnerInput {
  create: [InventoryCreateWithoutOwnerInput!]
  delete: [InventoryWhereUniqueInput!]
  connect: [InventoryWhereUniqueInput!]
  set: [InventoryWhereUniqueInput!]
  disconnect: [InventoryWhereUniqueInput!]
  update: [InventoryUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [InventoryUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [InventoryScalarWhereInput!]
  updateMany: [InventoryUpdateManyWithWhereNestedInput!]
}

input InventoryUpdateManyWithWhereNestedInput {
  where: InventoryScalarWhereInput!
  data: InventoryUpdateManyDataInput!
}

input InventoryUpdateWithoutOwnerDataInput {
  item: ItemUpdateOneRequiredInput
  quantity: Int
}

input InventoryUpdateWithWhereUniqueWithoutOwnerInput {
  where: InventoryWhereUniqueInput!
  data: InventoryUpdateWithoutOwnerDataInput!
}

input InventoryUpsertWithWhereUniqueWithoutOwnerInput {
  where: InventoryWhereUniqueInput!
  update: InventoryUpdateWithoutOwnerDataInput!
  create: InventoryCreateWithoutOwnerInput!
}

input InventoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  item: ItemWhereInput
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  id: ID
}

type Item {
  id: ID!
  type: ItemType!
  name: String!
  description: String
  price: Int!
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  type: ItemType!
  name: String!
  description: String
  price: Int!
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

input ItemCreateOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

type ItemEdge {
  node: Item!
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  atk_ASC
  atk_DESC
  dmg_ASC
  dmg_DESC
  mag_ASC
  mag_DESC
  def_ASC
  def_DESC
  MDef_ASC
  MDef_DESC
  HP_ASC
  HP_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  type: ItemType!
  name: String!
  description: String
  price: Int!
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
  AND: [ItemSubscriptionWhereInput!]
  OR: [ItemSubscriptionWhereInput!]
  NOT: [ItemSubscriptionWhereInput!]
}

enum ItemType {
  MISC
  WEAPON
  ARMOR
}

input ItemUpdateDataInput {
  type: ItemType
  name: String
  description: String
  price: Int
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

input ItemUpdateInput {
  type: ItemType
  name: String
  description: String
  price: Int
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

input ItemUpdateManyMutationInput {
  type: ItemType
  name: String
  description: String
  price: Int
  atk: Int
  dmg: Int
  mag: Int
  def: Int
  MDef: Int
  HP: Int
}

input ItemUpdateOneRequiredInput {
  create: ItemCreateInput
  update: ItemUpdateDataInput
  upsert: ItemUpsertNestedInput
  connect: ItemWhereUniqueInput
}

input ItemUpsertNestedInput {
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ItemType
  type_not: ItemType
  type_in: [ItemType!]
  type_not_in: [ItemType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  atk: Int
  atk_not: Int
  atk_in: [Int!]
  atk_not_in: [Int!]
  atk_lt: Int
  atk_lte: Int
  atk_gt: Int
  atk_gte: Int
  dmg: Int
  dmg_not: Int
  dmg_in: [Int!]
  dmg_not_in: [Int!]
  dmg_lt: Int
  dmg_lte: Int
  dmg_gt: Int
  dmg_gte: Int
  mag: Int
  mag_not: Int
  mag_in: [Int!]
  mag_not_in: [Int!]
  mag_lt: Int
  mag_lte: Int
  mag_gt: Int
  mag_gte: Int
  def: Int
  def_not: Int
  def_in: [Int!]
  def_not_in: [Int!]
  def_lt: Int
  def_lte: Int
  def_gt: Int
  def_gte: Int
  MDef: Int
  MDef_not: Int
  MDef_in: [Int!]
  MDef_not_in: [Int!]
  MDef_lt: Int
  MDef_lte: Int
  MDef_gt: Int
  MDef_gte: Int
  HP: Int
  HP_not: Int
  HP_in: [Int!]
  HP_not_in: [Int!]
  HP_lt: Int
  HP_lte: Int
  HP_gt: Int
  HP_gte: Int
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input ItemWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createItem(data: ItemCreateInput!): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  item(where: ItemWhereUniqueInput!): Item
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  type: UserType!
  name: String!
  gils: Int!
  bag(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  type: UserType!
  name: String!
  gils: Int!
  bag: InventoryCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutBagInput {
  create: UserCreateWithoutBagInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBagInput {
  type: UserType!
  name: String!
  gils: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  gils_ASC
  gils_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  type: UserType!
  name: String!
  gils: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserType {
  PLAYER
  NPC
}

input UserUpdateInput {
  type: UserType
  name: String
  gils: Int
  bag: InventoryUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  type: UserType
  name: String
  gils: Int
}

input UserUpdateOneRequiredWithoutBagInput {
  create: UserCreateWithoutBagInput
  update: UserUpdateWithoutBagDataInput
  upsert: UserUpsertWithoutBagInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBagDataInput {
  type: UserType
  name: String
  gils: Int
}

input UserUpsertWithoutBagInput {
  update: UserUpdateWithoutBagDataInput!
  create: UserCreateWithoutBagInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: UserType
  type_not: UserType
  type_in: [UserType!]
  type_not_in: [UserType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gils: Int
  gils_not: Int
  gils_in: [Int!]
  gils_not_in: [Int!]
  gils_lt: Int
  gils_lte: Int
  gils_gt: Int
  gils_gte: Int
  bag_every: InventoryWhereInput
  bag_some: InventoryWhereInput
  bag_none: InventoryWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    